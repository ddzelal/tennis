### Tennis Tournament Flow
# This file demonstrates the complete flow of a tennis tournament, from creating a tournament to recording match results.

### 1. Create Players
# First, we need to create players who will participate in the tournament

# Create Player 1
POST http://localhost:3000/api/players
Content-Type: application/json

{
  "name": "Novak Djokovic",
  "email": "novak@example.com",
  "phone": "+381123456789",
  "ranking": 1
}

### Create Player 2
POST http://localhost:3000/api/players
Content-Type: application/json

{
  "name": "Rafael Nadal",
  "email": "rafael@example.com",
  "phone": "+34123456789",
  "ranking": 2
}

### Create Player 3
POST http://localhost:3000/api/players
Content-Type: application/json

{
  "name": "Roger Federer",
  "email": "roger@example.com",
  "phone": "+41123456789",
  "ranking": 3
}

### Create Player 4
POST http://localhost:3000/api/players
Content-Type: application/json

{
  "name": "Carlos Alcaraz",
  "email": "carlos@example.com",
  "phone": "+34987654321",
  "ranking": 4
}

### 2. Create a Tournament
# Now, let's create a tournament

POST http://localhost:3000/api/tournaments
Content-Type: application/json

{
  "name": "Grand Slam 2023",
  "description": "Annual tennis tournament",
  "type": "LEAGUE",
  "startDate": "2023-06-01T00:00:00.000Z",
  "endDate": "2023-06-15T00:00:00.000Z",
  "maxPlayers": 8,
  "rules": {
    "setsToWin": 3,
    "pointsPerWin": 3
  }
}

### 3. Add Players to Tournament
# After creating the tournament, we need to add players to it
# Replace :tournamentId with the actual tournament ID from the response above

POST http://localhost:3000/api/tournaments/685840e531d238881d9f8c87/players
Content-Type: application/json

{
  "playerId": "685836f729c4b754f5a90a10"
}

### Add another player to tournament
POST http://localhost:3000/api/tournaments/:tournamentId/players
Content-Type: application/json

{
  "playerId": "player2Id"
}

### Add another player to tournament
POST http://localhost:3000/api/tournaments/:tournamentId/players
Content-Type: application/json

{
  "playerId": "player3Id"
}

### Add another player to tournament
POST http://localhost:3000/api/tournaments/:tournamentId/players
Content-Type: application/json

{
  "playerId": "player4Id"
}

### 4. Create Tournament Stages
# Now, let's create stages for the tournament
# Replace :tournamentId with the actual tournament ID

# Create Semifinals Stage
POST http://localhost:3000/api/stages
Content-Type: application/json

{
  "tournament": "685840e531d238881d9f8c87",
  "name": "Semifinals",
  "type": "SEMIFINALS",
  "order": 1,
  "startDate": "2023-06-10T00:00:00.000Z",
  "endDate": "2023-06-12T00:00:00.000Z",
  "advancingPlayers": 2,
  "rules": {
    "setsToWin": 2
  }
}

### Create Finals Stage
POST http://localhost:3000/api/stages
Content-Type: application/json

{
  "tournament": "685840e531d238881d9f8c87",
  "name": "Finals",
  "type": "FINALS",
  "order": 2,
  "startDate": "2023-06-14T00:00:00.000Z",
  "endDate": "2023-06-15T00:00:00.000Z",
  "advancingPlayers": 1,
  "rules": {
    "setsToWin": 3
  }
}

### 5. Add Players to Stages
# Now, let's add players to the semifinals stage
# Replace :stageId with the actual stage ID from the response above

# Add player 1 to semifinals
POST http://localhost:3000/api/stages/:stageId/players
Content-Type: application/json

{
  "playerId": "player1Id"
}

### Add player 2 to semifinals
POST http://localhost:3000/api/stages/6858416831d238881d9f8c97/players
Content-Type: application/json

{
  "playerId": "685836f729c4b754f5a90a10"
}

### Add player 3 to semifinals
POST http://localhost:3000/api/stages/:stageId/players
Content-Type: application/json

{
  "playerId": "player3Id"
}

### Add player 4 to semifinals
POST http://localhost:3000/api/stages/:stageId/players
Content-Type: application/json

{
  "playerId": "player4Id"
}

### 6. Generate Matches for Semifinals
# Now, let's generate matches for the semifinals stage
# Replace :stageId with the actual semifinals stage ID

POST http://localhost:3000/api/stages/6858416831d238881d9f8c97/generate-matches
Content-Type: application/json

{}

### 7. Get Matches for Semifinals
# Let's get the matches that were generated for the semifinals
# Replace :tournamentId with the actual tournament ID and :stageId with the semifinals stage ID

GET http://localhost:3000/api/matches?tournamentId=:tournamentId&stageId=:stageId

### 8. Record Match Results for Semifinals
# Now, let's record the results for the first semifinal match
# Replace :matchId with the actual match ID from the response above

POST http://localhost:3000/api/matches/685841e131d238881d9f8ca7/result
Content-Type: application/json

{
  "sets": [
    {
      "player1Score": 6,
      "player2Score": 4
    },
    {
      "player1Score": 7,
      "player2Score": 6
    }
  ],
  "winner": "685836e629c4b754f5a90a07"
}

### Record results for the second semifinal match
# Replace :matchId with the actual match ID

POST http://localhost:3000/api/matches/:matchId/result
Content-Type: application/json

{
  "sets": [
    {
      "player1Score": 6,
      "player2Score": 3
    },
    {
      "player1Score": 6,
      "player2Score": 4
    }
  ],
  "winner": "player3Id"
}

### 9. Add Winners to Finals Stage
# Now, let's add the winners of the semifinals to the finals stage
# Replace :stageId with the actual finals stage ID

# Add semifinal 1 winner to finals
POST http://localhost:3000/api/stages/:stageId/players
Content-Type: application/json

{
  "playerId": "player1Id"
}

### Add semifinal 2 winner to finals
POST http://localhost:3000/api/stages/:stageId/players
Content-Type: application/json

{
  "playerId": "player3Id"
}

### 10. Generate Match for Finals
# Now, let's generate the match for the finals stage
# Replace :stageId with the actual finals stage ID

POST http://localhost:3000/api/stages/:stageId/generate-matches
Content-Type: application/json

{}

### 11. Get Match for Finals
# Let's get the match that was generated for the finals
# Replace :tournamentId with the actual tournament ID and :stageId with the finals stage ID

GET http://localhost:3000/api/matches?tournamentId=:tournamentId&stageId=:stageId

### 12. Record Match Result for Finals
# Finally, let's record the result for the finals match
# Replace :matchId with the actual match ID from the response above

POST http://localhost:3000/api/matches/:matchId/result
Content-Type: application/json

{
  "sets": [
    {
      "player1Score": 6,
      "player2Score": 4
    },
    {
      "player1Score": 3,
      "player2Score": 6
    },
    {
      "player1Score": 6,
      "player2Score": 3
    }
  ],
  "winner": "player1Id"
}

### 13. Get Tournament Details
# Let's get the final tournament details
# Replace :tournamentId with the actual tournament ID

GET http://localhost:3000/api/tournaments/685840e531d238881d9f8c87